apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    cluster.x-k8s.io/provider: infrastructure-aws
    clusterctl.cluster.x-k8s.io: ""
    control-plane: capa-controller-manager
  name: capa-controller-manager
  namespace: {{ .Values.namespace }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      cluster.x-k8s.io/provider: infrastructure-aws
      control-plane: capa-controller-manager
  strategy: {}
  template:
    metadata:
      annotations:
        iam.amazonaws.com/role: {{ .Values.aws.iamRole }}
        target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
      creationTimestamp: null
      labels:
        cluster.x-k8s.io/provider: infrastructure-aws
        control-plane: capa-controller-manager
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                  - key: {{ .Values.k8sCpLabel }}
                    operator: Exists
              weight: 10
            - preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: Exists
              weight: 10
      containers:
        - args:
            {{- range .Values.manager.extraArgs }}
            - {{ . }}
            {{- end }}
            - --leader-elect
            - --feature-gates=EKS={{ .Values.manager.featureGates.eks }},EKSEnableIAM={{ .Values.manager.featureGates.eks }},EKSAllowAddRoles={{ .Values.manager.featureGates.eks }},EKSFargate={{ .Values.manager.featureGates.eksFargate }},MachinePool={{ .Values.manager.featureGates.machinePool }},EventBridgeInstanceState={{ .Values.manager.featureGates.eventBridgeInstanceState }},AutoControllerIdentityCreator={{ .Values.manager.featureGates.autoControllerIdentityCreator }},BootstrapFormatIgnition={{ .Values.manager.featureGates.bootstrapFormatIgnition }},ExternalResourceGC={{ .Values.manager.featureGates.externalResourceGC }},AlternativeGCStrategy={{ .Values.manager.featureGates.alternativeGCStrategy }},TagUnmanagedNetworkResources={{ .Values.manager.featureGates.tagUnmanagedNetworkResources }},ROSA={{ .Values.manager.featureGates.rosa }}
            - --v={{ .Values.manager.logLevel }}
            - --diagnostics-address=:{{ .Values.manager.diagnosticsAddress }}
            - --insecure-diagnostics={{ .Values.manager.insecureDiagnostics }}
          env:
            {{- if .Values.ocmUrl }}                          
            - name: OCM_API_URL                           
              value: {{ .Values.ocmUrl }}                                                                  
            {{- end}}                 
            {{- if .Values.ocmToken}}
            - name: OCM_TOKEN                                        
              value: {{ .Values.ocmToken }}
            {{- end}}
            - name: AWS_SHARED_CREDENTIALS_FILE
              value: /home/.aws/credentials
          image: {{ .Values.manager.image.repository }}:{{ .Values.manager.image.tag }}
          imagePullPolicy: {{ .Values.manager.image.pullPolicy }}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: healthz
            periodSeconds: 10
          name: manager
          ports:
            - containerPort: 9443
              name: webhook-server
              protocol: TCP
            - containerPort: 9440
              name: healthz
              protocol: TCP
            - containerPort: 8443
              name: metrics
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /readyz
              port: healthz
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsGroup: 65532
            runAsUser: 65532
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /tmp/k8s-webhook-server/serving-certs
              name: cert
              readOnly: true
            - mountPath: /home/.aws
              name: credentials
          command:
          {{- range .Values.manager.command }}
          - {{ . }}
          {{- end }}
          {{- with .Values.manager.resources }}
          resources:                            
          {{- toYaml . | nindent 12 }}                             
          {{- end }}
      priorityClassName: system-cluster-critical
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: capa-controller-manager
      terminationGracePeriodSeconds: 10
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: capa-webhook-service-cert
        - name: credentials
          secret:
            secretName: capa-manager-bootstrap-credentials
      {{- if .Values.priorityClassName }}              
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
status: {}
